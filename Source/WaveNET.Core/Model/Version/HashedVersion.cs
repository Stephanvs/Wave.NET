using System;
using WaveNET.Core.Utils;

namespace WaveNET.Core.Model.Version
{
    /// <summary>
    /// A version number and a cryptographic hash of the deltas preceding that version
    /// </summary>
    public class HashedVersion
        : IComparable<HashedVersion>
    {
        private readonly long _version;
        private readonly byte[] _historyHash;

        private HashedVersion(long version, byte[] historyHash)
        {
            Preconditions.CheckArgument(version >= 0, "negative version");
            Preconditions.CheckNotNull(historyHash, "null history hash");
            _version = version;
            _historyHash = historyHash;
        }

        public int CompareTo(HashedVersion other)
        {
            throw new NotImplementedException();
        }

        public static HashedVersion Of(long version, byte[] historyHash)
        {
            return new HashedVersion(version, historyHash);
        }

        /// <summary>
        /// Constructs an un-hashed (i.e. unsigned) version with a version number and empty hash.
        /// </summary>
        /// <remarks>The value generated by this method is the smallest hashed version with this version number.
        /// That is, <code>hv.CompareTo(HashedVersion.Unsigned(hv.Version)) >= 0</code>, for all hashed versions <code>hv</code>.</remarks>
        /// <param name="version"></param>
        /// <returns></returns>
        public static HashedVersion Unsigned(long version)
        {
            // todo: this method should be renamed to unhashed().
            return new HashedVersion(version, new byte[0]);
        }
    }
}